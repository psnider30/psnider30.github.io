---
layout: post
title:  "Building CLI Data Gem"
date:   2017-07-11 20:01:20 -0400
---


I chose to build my gem for the 2017 NBA draft. As a sports fan the draft was fresh, so seemed like a good fit. Don't hate me, but as a Warriors fan I initially wasn't totally tuned into the draft and I thought this project might teach me something other than coding. Also, since the dubs are the official NBA villains now, I must point out some of us suffered some horrendous basketball before the recent miraculous turn around. I can remember watching games vs. the Lakers while in H.S and I knew we had 0% chance of winning. Now the Lakers are in post Kobe rebuilding mode, and the best thing going for them is drafting arguably the most entertaining pro-sports dad ever in Lavar Ball. I also hear his son Lonzo will come with the deal. Now, if you're not a Warriors fan, try and put that out of your head while I explain the process of building my gem.

After the recent labs, I didn't think this was going to be that hard, I thought 2-3 days, but it took longer. My first struggle was I went to scrape draft boards for basic player details from all the big sites like nba.com, espn.com, yahoo.com, etc. I couldn't get the data with nokogiri. No matter if I used an exact id or copied the exact selectors or copied the xpath I kept getting empty arrays. I was convinced there had to be a way to scrape the data and I just needed the right selectors. I spent hours on this and finally had to concede I couldn't scrape from certain pages. I believe it could be dynamic data that didn't load fast enough to be scraped or it required permission in some way. I will have to learn that later.

I found a simpler CBS website to scrape the draft and I was satisfied, although there were some strange formatting differences, which made the code a little wonky. After scraping the draft I moved onto scraping player profiles, which luckily was possible to do from the nba.com site. They were the links from the very draft board which I couldn't scrape. Each players stats were inside a p instead of a li, so the code required looking back at a strong label to get the correct p array element. I thought I had all my players' URLâ€™s after coding away any inconsistencies (e.g. .gsub(/\W/)) to remove apostrophes and hyphens. However, I got an error when trying to scrape the entire draft, which takes a while since scraping 60 pages (an api probably more practical). I could scrape the first players and even thought I had iterated and scraped each one in pry. It wasn't until I met with Corinna and we iterated with a slightly different approach that I found the player causing the error and it was due to a spelling error between websites. With that fixed I was very happy to be able to scrape all the players and changed the method to do it individually for each player.

Two things that should have been simple ended up being two of the biggest bumps in the road for me to complete the project. Sometimes that's the way it goes I guess. If it was a lab with pre-written test specs maybe there would have been more detailed clues, but even then, some of those errors may have been hard to anticipate. Also, the websites weren't pre-chosen this time and that meant it might be trickier and it was.

I enjoyed writing all the functionality of the code. I had a pretty good idea of what I wanted my gem to do, but I went through different iterations and refactoring of the code as I saw the best way to display the data and also organize my code. I actually started scraping in my Player class before I realized that really should be the responsibility of a Scraper class. I knew I wanted my gem to display the draft and give options to see more player details. I also knew I wanted to see picks by NBA teams or their pre-NBA teams. I later decided that inside  the teams menu items the program should also ask the user if they wanted to see more player details instead of having to return to the main menu for that functionality.
 Another change was I originally had an NbaTeam class and a FormerTeam class. In some ways keeping them could have been better. However, I was at the end and I had only written in the Player class and it seemed I just needed the string for the teams and then I could get all my data and match the players with teams through the player object. I thought eliminating the classes might simplify things and adding them back may be a task for another day. I was ready to move on and I was happy with the gem I had built. I still wonder if the way I have it configured now would be considered correct?

I learned a lot from this project and hope to keep the momentum going as I move on to other platforms!

